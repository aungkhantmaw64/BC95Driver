/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SERIAL_IO_H
#define _MOCK_SERIAL_IO_H

#include "unity.h"
#include "serial_io.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_serial_io_Init(void);
void mock_serial_io_Destroy(void);
void mock_serial_io_Verify(void);




#define serialIO_create_IgnoreAndReturn(cmock_retval) serialIO_create_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void serialIO_create_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, serialIO_t cmock_to_return);
#define serialIO_create_StopIgnore() serialIO_create_CMockStopIgnore()
void serialIO_create_CMockStopIgnore(void);
#define serialIO_create_ExpectAndReturn(number, baudrate, cmock_retval) serialIO_create_CMockExpectAndReturn(__LINE__, number, baudrate, cmock_retval)
void serialIO_create_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int number, uint32_t baudrate, serialIO_t cmock_to_return);
typedef serialIO_t (* CMOCK_serialIO_create_CALLBACK)(int number, uint32_t baudrate, int cmock_num_calls);
void serialIO_create_AddCallback(CMOCK_serialIO_create_CALLBACK Callback);
void serialIO_create_Stub(CMOCK_serialIO_create_CALLBACK Callback);
#define serialIO_create_StubWithCallback serialIO_create_Stub
#define serialIO_create_IgnoreArg_number() serialIO_create_CMockIgnoreArg_number(__LINE__)
void serialIO_create_CMockIgnoreArg_number(UNITY_LINE_TYPE cmock_line);
#define serialIO_create_IgnoreArg_baudrate() serialIO_create_CMockIgnoreArg_baudrate(__LINE__)
void serialIO_create_CMockIgnoreArg_baudrate(UNITY_LINE_TYPE cmock_line);
#define serialIO_write_IgnoreAndReturn(cmock_retval) serialIO_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void serialIO_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define serialIO_write_StopIgnore() serialIO_write_CMockStopIgnore()
void serialIO_write_CMockStopIgnore(void);
#define serialIO_write_ExpectAndReturn(serial, byte, cmock_retval) serialIO_write_CMockExpectAndReturn(__LINE__, serial, byte, cmock_retval)
void serialIO_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, serialIO_t serial, char byte, int cmock_to_return);
typedef int (* CMOCK_serialIO_write_CALLBACK)(serialIO_t serial, char byte, int cmock_num_calls);
void serialIO_write_AddCallback(CMOCK_serialIO_write_CALLBACK Callback);
void serialIO_write_Stub(CMOCK_serialIO_write_CALLBACK Callback);
#define serialIO_write_StubWithCallback serialIO_write_Stub
#define serialIO_write_IgnoreArg_serial() serialIO_write_CMockIgnoreArg_serial(__LINE__)
void serialIO_write_CMockIgnoreArg_serial(UNITY_LINE_TYPE cmock_line);
#define serialIO_write_IgnoreArg_byte() serialIO_write_CMockIgnoreArg_byte(__LINE__)
void serialIO_write_CMockIgnoreArg_byte(UNITY_LINE_TYPE cmock_line);
#define serialIO_read_IgnoreAndReturn(cmock_retval) serialIO_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void serialIO_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char cmock_to_return);
#define serialIO_read_StopIgnore() serialIO_read_CMockStopIgnore()
void serialIO_read_CMockStopIgnore(void);
#define serialIO_read_ExpectAndReturn(serial, cmock_retval) serialIO_read_CMockExpectAndReturn(__LINE__, serial, cmock_retval)
void serialIO_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, serialIO_t serial, char cmock_to_return);
typedef char (* CMOCK_serialIO_read_CALLBACK)(serialIO_t serial, int cmock_num_calls);
void serialIO_read_AddCallback(CMOCK_serialIO_read_CALLBACK Callback);
void serialIO_read_Stub(CMOCK_serialIO_read_CALLBACK Callback);
#define serialIO_read_StubWithCallback serialIO_read_Stub
#define serialIO_read_IgnoreArg_serial() serialIO_read_CMockIgnoreArg_serial(__LINE__)
void serialIO_read_CMockIgnoreArg_serial(UNITY_LINE_TYPE cmock_line);
#define serialIO_destroy_Ignore() serialIO_destroy_CMockIgnore()
void serialIO_destroy_CMockIgnore(void);
#define serialIO_destroy_StopIgnore() serialIO_destroy_CMockStopIgnore()
void serialIO_destroy_CMockStopIgnore(void);
#define serialIO_destroy_Expect(serial) serialIO_destroy_CMockExpect(__LINE__, serial)
void serialIO_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line, serialIO_t serial);
typedef void (* CMOCK_serialIO_destroy_CALLBACK)(serialIO_t serial, int cmock_num_calls);
void serialIO_destroy_AddCallback(CMOCK_serialIO_destroy_CALLBACK Callback);
void serialIO_destroy_Stub(CMOCK_serialIO_destroy_CALLBACK Callback);
#define serialIO_destroy_StubWithCallback serialIO_destroy_Stub
#define serialIO_destroy_IgnoreArg_serial() serialIO_destroy_CMockIgnoreArg_serial(__LINE__)
void serialIO_destroy_CMockIgnoreArg_serial(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
